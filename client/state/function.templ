package state

import (
    "fmt"
    "encoding/json"

    "github.com/ocuroot/ocuroot/sdk"
    "github.com/ocuroot/ui/components/badges"
)

templ Input(key string, desc sdk.InputDescriptor) {
    <strong>{ key }</strong>
    if desc.Ref != nil {
        <a href={ fmt.Sprintf("/ref/%s", *desc.Ref) }>@badges.Neutral("Ref")</a>
    }
    <br/>
    
    if desc.Value != nil {
        @Value(desc.Value)
    } else if desc.Ref != nil && desc.Default != nil {
        @Value(desc.Default)
    } else if desc.Ref != nil {
        @badges.Warning("Pending")
    }
}

templ Output(key string, v any) {
    <strong>{ key }</strong><br/>
    @Value(v)
}

templ Value(v any) {
        switch v.(type) {
        case string:
            <pre class="text_value">{ v.(string) }</pre>
        case int:
            <em>{ v.(int) }</em>
        case float64:
            <em>{ v.(float64) }</em>
        case bool:
            <em>{ v.(bool) }</em>
        default:
            <pre class="json_value">{ JSONOutput(v) }</pre>
    }
}

func JSONOutput(desc any) string {
    out, err := json.MarshalIndent(desc, "", "    ")
    if err != nil {
        return fmt.Sprint(desc)
    }
    return string(out)
}