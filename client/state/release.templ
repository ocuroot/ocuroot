package state

import (
    "fmt"

    "github.com/ocuroot/ui/components"
    "github.com/ocuroot/ui/components/badges"
    "github.com/ocuroot/ocuroot/store/models"
    "github.com/ocuroot/ocuroot/lib/release"
    "github.com/ocuroot/ocuroot/ui/components/pipeline"
)

templ ReleaseCard(props RefPageProps) {
    @components.Card() {
        @pipeline.Pipeline(pipeline.PipelineProps{
			Summary: ReleasePreview(props),
		})
    }
}

templ ReleaseSummary(props RefPageProps, release release.ReleaseInfo) {
    <div>Commit: <a href="#">{ release.Commit }</a></div>
}

func ReleasePreview(props RefPageProps) *pipeline.ReleaseSummary {
    summary := pipeline.SDKPackageToReleaseSummary(
		models.ReleaseID(props.Ref),
		"preview",
		props.Content.(release.ReleaseInfo).Package,
		props.ChildRefs...,
	)
    return summary
}

templ StatusCell(statusCounts map[models.Status]int) {
    <div>
        if statusCounts[models.StatusComplete] > 0 {
            @badges.RoundLive(fmt.Sprint(statusCounts[models.StatusComplete]))
        }
        if statusCounts[models.StatusPending] + statusCounts[models.StatusPaused] > 0 {
            @badges.RoundPending(fmt.Sprint(statusCounts[models.StatusPending] + statusCounts[models.StatusPaused]))
        }       
        if statusCounts[models.StatusFailed] + statusCounts[models.StatusFailedRetried] > 0  {
            @badges.RoundFailed(fmt.Sprint(statusCounts[models.StatusFailed] + statusCounts[models.StatusFailedRetried]))
        }
        if statusCounts[models.StatusRunning] > 0 {
            // TODO: Come up with a running specific status badge
            @badges.RoundPending(fmt.Sprint(statusCounts[models.StatusRunning]))
        }
    </div>
}
