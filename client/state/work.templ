package state

import (
	"fmt"
	"path"
	"strings"

	"github.com/ocuroot/ocuroot/store/models"
	"github.com/ocuroot/ui/components"
	"github.com/ocuroot/ui/components/badges"
	"github.com/ocuroot/ui/components/layout"
)

templ WorkView(props RefPageProps) {
	@WorkContent(props.Content.(models.Run), props.ChildRefs)
}

templ WorkContent(work models.Run, children []string) {
	<div class="functionheader">
		<div>&nbsp;</div>
		<div class="functionstatus">
			@StatusBadge(StatusFromChildren(children))
		</div>
	</div>
	@layout.Row() {
		@Column40() {
			for _, fn := range work.Functions {
				@components.Card() {
					<div class="functionheader">
						<h2 class="functionname">{ fn.Fn.Name }</h2>
						<div class="functionstatus">
							{ fn.Fn.Pos }
						</div>
					</div>
					<h3>Inputs</h3>
					<ul>
						for key, input := range fn.Inputs {
							<div class="input">
								@Input(key, input)
							</div>
						}
					</ul>
				}
			}
			@components.Card() {
				<h3>Outputs</h3>
				<ul>
					for key, output := range work.Outputs {
						<div class="output">
							@Output(key, output)
						</div>
					}
				</ul>
			}
		}
		@Column60() {
			for _, child := range children {
				if strings.HasSuffix(child, "/logs") {
					<div class="logview">
						<div hx-trigger="load" hx-get={ fmt.Sprintf("/ref/%s?partial=true", child) } hx-swap="innerHTML">{ fmt.Sprint(child) }</div>
					</div>
				}
			}
		}
	}
}

templ StatusBadge(status string) {
	switch status {
		case "running":
			@badges.Pending("Pending")
		case "pending":
			@badges.Pending("Pending")
		case "failed":
			@badges.Negative("Failed")
		case "complete":
			@badges.Positive("Success")
		case "cancelled":
			@badges.Negative("Cancelled")
	}
}

func StatusFromChildren(children []string) string {
	for _, child := range children {
		if strings.Contains(child, "/status/") {
			return path.Base(child)
		}
	}
	return ""
}

templ HalfColumn() {
	<div class="halfcolumn">
		{ children... }
	</div>
}

templ Column40() {
	<div class="column column-40">
		{ children... }
	</div>
}

templ Column60() {
	<div class="column column-60">
		{ children... }
	</div>
}
